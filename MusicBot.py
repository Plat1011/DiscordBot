# Importing libraries and modules
from flask import Flask
from threading import Thread
import os
import discord
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
import yt_dlp # NEW
from collections import deque # NEW
import asyncio # NEW


app = Flask('')

@app.route('/')
def home():
    return "Bot is running!"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# Environment variables for tokens and other sensitive data
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# Create the structure for queueing songs - Dictionary of queues
SONG_QUEUES = {}

async def search_ytdlp_async(query, ydl_opts):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: _extract(query, ydl_opts))

def _extract(query, ydl_opts):
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        return ydl.extract_info(query, download=False)


# Setup of intents. Intents are permissions the bot has on the server
intents = discord.Intents.default()
intents.message_content = True

# Bot setup
bot = commands.Bot(command_prefix="!", intents=intents)

# Bot ready-up code
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"{bot.user} —Å–Ω–æ–≤–∞ —Ç—É—Ç")


@bot.tree.command(name="skip", description="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é")
async def skip(interaction: discord.Interaction):
    if interaction.guild.voice_client and (interaction.guild.voice_client.is_playing() or interaction.guild.voice_client.is_paused()):
        interaction.guild.voice_client.stop()
        await interaction.response.send_message("–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ 5G-–∫–∞–Ω–∞–ª—ã.")
    else:
        await interaction.response.send_message("–ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å ‚Äî —ç—Ñ–∏—Ä –ø—É—Å—Ç!")


@bot.tree.command(name="pause", description="–°—Ç–∞–≤–∏—Ç –Ω–∞ –ø–∞—É–∑—É")
async def pause(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client

    if voice_client is None:
        return await interaction.response.send_message("–Ø –ø–æ—Ç–µ—Ä—è–ª —Å–∏–≥–Ω–∞–ª 5G –∏ —É—à—ë–ª –≤ –æ—Ñ–ª–∞–π–Ω‚Ä¶")

    if not voice_client.is_playing():
        return await interaction.response.send_message("–ù–µ—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É ‚Äî —ç—Ñ–∏—Ä –ø—É—Å—Ç!")

    voice_client.pause()
    await interaction.response.send_message("–ü–æ—Ç–æ–∫ 5G –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.")


@bot.tree.command(name="resume", description="–ü—Ä–æ–¥–æ–ª–∂–∏–º")
async def resume(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client

    if voice_client is None:
        return await interaction.response.send_message("–°–∏–≥–Ω–∞–ª 5G –µ—â—ë –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚Ä¶")

    if not voice_client.is_paused():
        return await interaction.response.send_message("–≠—Ñ–∏—Ä –∏ —Ç–∞–∫ –∏–¥—ë—Ç, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.")

    voice_client.resume()
    await interaction.response.send_message("–≠—Ñ–∏—Ä 5G —Å–Ω–æ–≤–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏!")


@bot.tree.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client

    if not voice_client or not voice_client.is_connected():
        return await interaction.response.send_message("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 5G-–±–∞—à–Ω–µ, –Ω–µ—á–µ–≥–æ –æ—Ç–∫–ª—é—á–∞—Ç—å.")

    guild_id_str = str(interaction.guild_id)
    if guild_id_str in SONG_QUEUES:
        SONG_QUEUES[guild_id_str].clear()

    if voice_client.is_playing() or voice_client.is_paused():
        voice_client.stop()

    await voice_client.disconnect()
    await interaction.response.send_message("–û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç 5G‚Ä¶ –±–∞—à–Ω—è –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç.")


@bot.tree.command(name="play", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Å–Ω—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
@app_commands.describe(song_query="Search query")
async def play(interaction: discord.Interaction, song_query: str):
    await interaction.response.defer()

    if interaction.user.voice is None or interaction.user.voice.channel is None:
        await interaction.followup.send(
            "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–ª–∏–∂–∞–π—à–µ–π –±–∞—à–Ω–µ 5G! –ë–µ–∑ —Å–∏–≥–Ω–∞–ª–∞ –º—É–∑—ã–∫–∞ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç."
        )
        return

    voice_channel = interaction.user.voice.channel
    voice_client = interaction.guild.voice_client

    if voice_client is None:
        voice_client = await voice_channel.connect()
    elif voice_channel != voice_client.channel:
        await voice_client.move_to(voice_channel)

    ydl_options = {
        "format": "bestaudio[abr<=96]/bestaudio",
        "noplaylist": True,
        "youtube_include_dash_manifest": False,
        "youtube_include_hls_manifest": False,
    }

    query = "ytsearch1: " + song_query

    try:
        results = await search_ytdlp_async(query, ydl_options)
        tracks = results.get("entries")
        if not tracks:
            await interaction.followup.send("–¢–∞–∫–∏—Ö –Ω–µ –∑–Ω–∞—é –≤ —ç—Ñ–∏—Ä–µ 5G‚Ä¶")
            return
    except Exception as e:
        # –ï—Å–ª–∏ yt-dlp –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, YouTube —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
        await interaction.followup.send(
            "–°–∏–≥–Ω–∞–ª—ã 5G –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–µ—Å–Ω–µ. –ö—Ç–æ-—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —ç—Ñ–∏—Ä‚Ä¶"
        )
        print(f"YT-DLP ERROR: {e}")  # –õ–æ–≥–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
        return

    first_track = tracks[0]
    audio_url = first_track["url"]
    title = first_track.get("title", "Untitled")

    guild_id = str(interaction.guild_id)
    if SONG_QUEUES.get(guild_id) is None:
        SONG_QUEUES[guild_id] = deque()

    SONG_QUEUES[guild_id].append((audio_url, title))

    if voice_client.is_playing() or voice_client.is_paused():
        await interaction.followup.send(f"–ü–µ—Å–Ω—è **{title}** –ø–µ—Ä–µ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ 5G-—á–∞—Å—Ç–æ—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")
    else:
        await interaction.followup.send(f"–°–µ–π—á–∞—Å —ç—Ñ–∏—Ä 5G —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç: **{title}**. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Å–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏‚Ä¶ üòâ")
        await play_next_song(voice_client, guild_id, interaction.channel)



async def play_next_song(voice_client, guild_id, channel):
    if SONG_QUEUES[guild_id]:
        audio_url, title = SONG_QUEUES[guild_id].popleft()

        ffmpeg_options = {
            "before_options": "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
            "options": "-vn -c:a libopus -b:a 96k",
        }

        source = discord.FFmpegOpusAudio(audio_url, **ffmpeg_options)

        def after_play(error):
            if error:
                print(f"–û–®–ò–ë–ö–ê {title}: {error}")
            asyncio.run_coroutine_threadsafe(play_next_song(voice_client, guild_id, channel), bot.loop)

        voice_client.play(source, after=after_play)
        asyncio.create_task(channel.send(f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{title}**"))
    else:
        await channel.send("–û—á–µ—Ä–µ–¥—å –ø–µ—Å–µ–Ω —á–µ—Ä–µ–∑ 5G –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ñ–¥—É –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!")
        SONG_QUEUES[guild_id] = deque()


# Run the bot
bot.run(TOKEN)
